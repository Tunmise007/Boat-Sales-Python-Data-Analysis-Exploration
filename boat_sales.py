# -*- coding: utf-8 -*-
"""Boat_Sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h_G8XyeZZ6Ij00dI3XtCLZvgDFrwNJT5

## **Introductions**
Handsworth Boats is a specialised organisation that deals with the sale of yachts and boats. The marketing team is currently in the process of creating a weekly newsletter aimed at assisting boat owners in increasing views of their boats and staying up to date with market trends. The team intends to analyse recent data to gain valuable insights. Some potential inquiries that the team could explore are as follows:
1.	What are the distinguishing features of the most frequently viewed boat listings in the past 7 days?
2.	Do the most expensive boats receive the highest number of views?
3.	Are there shared characteristics among the most viewed boats?

### **Dataset**

Column Name	 --  Details

*   Price - Character, boat price listed in different currencies (e.g.EUR, Â£, CHF etc.) on the website

*   Boat Type -  Character, type of the boat

*   Manufacturer - Character, manufacturer of the boat

*   Type - Character, condition of the boat and engine type(e.g. Diesel, Unleaded, etc.)

*   Year - Built Numeric, year of the boat built

*   Length - Numeric, length in meter of the boat

*   Width - Numeric, width in meter of the boat

*   Material- Character, material of the boat (e.g. GRP, PVC, etc.)

*   Location - Character, location of the boat is listed

*   Number of views last 7 days - Numeric, number of the views of the list last 7 days

### **Required Libraries**
"""

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt 
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns

"""**Load Data**"""

#reading boat sales data from google drive
boat_sales = pd.read_csv('/content/drive/MyDrive/boat_data.csv')

boat_sales.head()

"""## **Data understanding** """

shape = boat_sales.shape

print('Rows :', shape[0])
print('Columns :', shape[1])

#inspecting data
boat_sales.info()

"""*   Data has null values 
*   Wrong data types

*   Location & Price column values need to be standardised

# **Data Cleaning**
"""

#Defining a function to normailse the 'Price' column to have currency
def currency(x):
  column1 = x.split(" ")[0]
  return column1

def price(x):
  column_2 = x.split(" ")[1]
  return column_2

#Applying the functions 
boat_sales['Currency'] = boat_sales['Price'].apply(currency)

boat_sales['Price'] = boat_sales['Price'].apply(price)

boat_sales.head()

#Replacing Â£ to GBP
boat_sales['Currency'] = boat_sales['Currency'].replace('Â£', 'GBP')

boat_sales['Currency'].value_counts()

#Convering price to GBP (FX Rate as at 2023-04-30)
def change_price (Price, Currency):
  if Currency == 'EUR':
    return int(Price) * 0.87
  elif Currency == 'CHF':
    return int(Price) * 0.89
  elif Currency == 'GBP':
    return Price
  elif Currency == 'DKK':
    return int(Price) * 0.11

boat_sales['GBP Price'] = boat_sales.apply(lambda x: change_price(x.Price, x.Currency), axis=1)

boat_sales.head()

"""**Standardising columns**"""

#Split location into country and city
boat_sales[['Country', 'City']] = boat_sales['Location'].str.split('Â»', 1, expand=True)

boat_sales[['City', 'Other']] = boat_sales['City'].str.split('Â»', 1, expand=True)

boat_sales['City'] = boat_sales['City'].str.replace('¶', '')

boat_sales['City'] = boat_sales['City'].str.replace('Ã', '')


boat_sales.head()

"""**Fill NaN values**"""

boat_sales.isna().sum()

boat_sales['Manufacturer'].value_counts()

#Fill NaN Values
boat_sales['Manufacturer'].fillna('None', inplace=True)       
boat_sales['Country'].fillna('None', inplace=True)  
boat_sales['City'].fillna('None', inplace=True)  
boat_sales['Type'].fillna(boat_sales['Type'].value_counts().idxmax(), inplace=True)
boat_sales['Length'].fillna(boat_sales['Length'].median(), inplace=True)
boat_sales['Width'].fillna(boat_sales['Width'].median(), inplace=True)
boat_sales['Material'].fillna(boat_sales['Material'].value_counts().idxmax(), inplace=True)

"""**Drop unwanted columns**"""

boat_sales_clean = boat_sales.drop(['Location', 'Price', 'Other'], axis=1)

"""**Changing Data Types**"""

print(boat_sales_clean.dtypes)

#soft-conversion by inferring the data type of ‘object’-type columns. Non-object and unconvertible columns are left unchanged
boat_sales_clean = boat_sales_clean.infer_objects()

#Changing 'GBP Price' to int
boat_sales_clean['GBP Price'] = boat_sales_clean[['GBP Price']].apply(pd.to_numeric)

print(boat_sales_clean.dtypes)

boat_sales_clean.head()

boat_sales_clean[['Boat Type', 'Other Type']] = boat_sales_clean['Boat Type'].str.split(',', 1, expand=True)

boat_sales_clean.head()

"""# **Data Exploration**

**What are the distinguishing features of the most frequently viewed boat listings in the past 7 days?**
"""

boat_type_views2 = boat_sales_clean.pivot_table(values ='Number of views last 7 days',
                                                index='Boat Type',
                                                aggfunc= np.sum).sort_values('Number of views last 7 days')

boat_type_views2.reset_index(inplace=True)

fig = px.bar(boat_type_views2, x='Boat Type', y='Number of views last 7 days', color_discrete_sequence = ["gray"], title='Most Viewed Boat Type In The Last 7 Days') 

fig.show()

boat_type_pivot = boat_sales_clean.pivot_table(values =['Number of views last 7 days'],
                                                index=['Boat Type', 'Material'],
                                                aggfunc= np.sum)

boat_type_pivot.reset_index(inplace=True)

boat_type_pivot.head()

fig = px.bar(boat_type_pivot, x='Boat Type', y='Number of views last 7 days', title='Most Viewed Boat Type & Material In The Last 7 Days', color = 'Material') 


fig.show()

"""**Do the most expensive boats receive the highest number of views?**"""

#Grouping the data by Boat Type and summing the values
boat_type_group = boat_sales_clean.groupby(['Boat Type'], as_index=False).sum()

# Assigning the values to a new variable
Boat_type = boat_type_group["Boat Type"].values
GBP_Price = boat_type_group["GBP Price"].values
Views = boat_type_group["Number of views last 7 days"].values

# Creating a bar chart with the x-axis as the month and the y-axis as the total sales.
fig = go.Figure(
    data=go.Bar(
        x=Boat_type,
        y=GBP_Price,
        name="Price of Boats",
        marker=dict(color="gray"),
    )
)
# Adding a second y-axis to the chart.
fig.add_trace(
    go.Scatter(
        x=Boat_type,
        y=Views,
        yaxis="y2",
        name="Views",
        marker=dict(color="orange"),
    )
)
# Updating the layout of the figure.
fig.update_layout(
    title = 'Do the most expensive boats have more views',
    legend=dict(orientation="h"),
    yaxis=dict(
        title=dict(text="Price of Boats"),
        side="left",
    ),
    yaxis2=dict(
        title=dict(text="No of Views in the last 7 days"),
        side="right",
        overlaying="y",
        tickmode="auto",
    ),
)

fig.show()

"""**Are there shared characteristics among the most viewed boats?**"""

boat_sales_clean.head()

#Grouping the dat by 'Boat Type', 'Manufacturer', 'Type', 'Length', 'Width', 'Year Built', 'Material'
boat_type_group2 = boat_sales_clean.groupby(['Boat Type', 'Manufacturer', 'Type', 'Length', 'Width', 'Year Built', 'Material'], as_index=False)["Number of views last 7 days"].sum()
#Sorting the data by Number of views last 7 days in decending order and getting top ten most viewed boats
boat_type_group2 = boat_type_group2.nlargest(n=10, columns=['Number of views last 7 days']).sort_values(by='Number of views last 7 days', ascending = False)


#creating a treemap that shows the total purchase by pizza size on specific days.
fig5 = px.treemap(boat_type_group2, path=[px.Constant('shared characteristics'),'Boat Type', 'Manufacturer', 'Type', 'Length', 'Width', 'Year Built', 'Material'], color='Boat Type',title = 'Shared Characteristics Among The Top 10 Most Viewed Boats')
fig5.update_traces(marker=dict(cornerradius=50))
fig5.update_layout(margin = dict(t=50, l=25, r=25, b=25))
fig5.layout.hovermode= False
fig5.show()